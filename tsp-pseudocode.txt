Function travelSales(roadMap):
    # Step 1: Initialize
    cities = get_all_cities(roadMap)           # Get list of all cities from roadMap
    n = number of cities
    startCity = cities[0]                      # Choose first city as starting point
    
    # Step 2: Create DP table
    # dp[S][e] stores minimum cost of path that:
    # - visits all cities in subset S exactly once
    # - starts from startCity
    # - ends at city e
    dp[subset][end] = infinity for all subsets and end cities
    path[subset][end] = [] for all subsets and end cities    # Store actual paths
    
    # Step 3: Base case - visiting single city
    dp[{startCity}][startCity] = 0
    path[{startCity}][startCity] = [startCity]
    
    # Step 4: Fill DP table
    For size = 2 to n:
        For each subset S of cities with size 'size' that includes startCity:
            For each end city e in S, where e ≠ startCity:
                dp[S][e] = infinity
                For each previous city p in S, where p ≠ e:
                    # Try to build path ending at 'e' by extending
                    # path that ended at 'p' with edge (p->e)
                    if (p,e) exists in roadMap:
                        distance = edge_distance(p, e, roadMap)
                        previousSubset = S - {e}
                        newCost = dp[previousSubset][p] + distance
                        
                        if newCost < dp[S][e]:
                            dp[S][e] = newCost
                            path[S][e] = path[previousSubset][p] + [e]
    
    # Step 5: Find optimal solution including return to start
    finalSubset = all_cities
    minCost = infinity
    bestPath = None
    
    For each last city e ≠ startCity:
        if (e,startCity) exists in roadMap:
            lastEdge = edge_distance(e, startCity, roadMap)
            totalCost = dp[finalSubset][e] + lastEdge
            if totalCost < minCost:
                minCost = totalCost
                bestPath = path[finalSubset][e] + [startCity]
    
    # Step 6: Check if solution exists
    if minCost == infinity:
        return None    # No valid tour exists
    else:
        return bestPath

Helper Functions:
----------------
Function edge_distance(city1, city2, roadMap):
    if edge (city1,city2) exists in roadMap:
        return distance of edge
    return infinity

Function get_all_cities(roadMap):
    return set of all unique cities from roadMap edges
