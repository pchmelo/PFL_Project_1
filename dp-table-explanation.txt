dp[subset][end] Structure:

1. subset: 
   - Is a set of cities that have been visited in the path
   - Represented as a binary mask or set of cities
   - Examples for 4 cities (A,B,C,D):
     {A} = [1,0,0,0]          # Only visited A
     {A,B} = [1,1,0,0]        # Visited A and B
     {A,B,C} = [1,1,1,0]      # Visited A, B, and C
     {A,B,C,D} = [1,1,1,1]    # Visited all cities

2. end:
   - Is the last city visited in the current path
   - Must be one of the cities in the subset
   - Example: if subset = {A,B,C}, end can only be A, B, or C

Example DP Table for 3 cities (A,B,C):
----------------------------------------
subset      | end | value  | meaning
----------------------------------------
{A}         | A   | 0      | Start at A
{A}         | B   | ∞      | Invalid
{A}         | C   | ∞      | Invalid
----------------------------------------
{A,B}       | A   | ∞      | Invalid
{A,B}       | B   | 2      | Path A→B
{A,B}       | C   | ∞      | Invalid
----------------------------------------
{A,C}       | A   | ∞      | Invalid
{A,C}       | B   | ∞      | Invalid
{A,C}       | C   | 5      | Path A→C
----------------------------------------
{A,B,C}     | A   | ∞      | Invalid
{A,B,C}     | B   | 8      | Path A→C→B
{A,B,C}     | C   | 5      | Path A→B→C
----------------------------------------

Initial State:
- All entries are set to infinity (∞) initially
- Only dp[{startCity}][startCity] is set to 0
- Infinity represents either:
  1. Invalid combinations
  2. Paths not yet computed
  3. Impossible paths (no connection exists)

Valid Entries Must Satisfy:
1. end city must be in subset
2. subset must include starting city
3. there must be a valid path visiting all cities in subset
4. path must end at 'end' city

Purpose of Setting Initial Values to Infinity:
1. Makes comparison easy (any real path will be better than infinity)
2. Helps identify invalid or uncomputed states
3. Ensures minimum calculations work correctly
4. Allows detection of impossible paths
